//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use daoyi_cloud_common::enums::common_status_enum::CommonStatusEnum;
use daoyi_cloud_common::enums::sex_enum::SexEnum;
use daoyi_cloud_common::enums::{serialize_enum, serialize_opt_enum};
use daoyi_cloud_common::utils::serde_util::{serialize_datetime, serialize_opt_datetime};
use sea_orm::entity::prelude::*;
use sea_orm::prelude::async_trait::async_trait;
use sea_orm::sqlx::types::chrono::Local;
use sea_orm::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "system_users")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub username: String,
    #[serde(skip_serializing)]
    pub password: Option<String>,
    pub nickname: String,
    pub remark: Option<String>,
    pub dept_id: Option<i64>,
    pub post_ids: Option<String>,
    pub email: Option<String>,
    pub mobile: Option<String>,
    #[serde(
        serialize_with = "serialize_opt_enum",
        skip_serializing_if = "Option::is_none"
    )]
    pub sex: Option<SexEnum>,
    pub avatar: Option<String>,
    #[serde(serialize_with = "serialize_enum")]
    pub status: CommonStatusEnum,
    #[serde(skip_serializing)]
    pub login_ip: Option<String>,
    #[serde(
        serialize_with = "serialize_opt_datetime",
        skip_serializing_if = "Option::is_none"
    )]
    pub login_date: Option<DateTime>,
    #[serde(skip_serializing)]
    pub creator: Option<String>,
    #[serde(serialize_with = "serialize_datetime")]
    pub create_time: DateTime,
    #[serde(skip_serializing)]
    pub updater: Option<String>,
    #[serde(serialize_with = "serialize_datetime")]
    pub update_time: DateTime,
    #[serde(skip_serializing)]
    pub deleted: bool,
    #[serde(skip_serializing)]
    pub tenant_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            if self.password.is_not_set() {
                self.password = Set(Some(bcrypt::hash("123456", bcrypt::DEFAULT_COST).unwrap()));
            } else {
                self.password = Set(Some(
                    bcrypt::hash(self.password.unwrap().unwrap(), bcrypt::DEFAULT_COST)
                        .expect("密码加密失败"),
                ));
            }
            self.create_time = Set(Local::now().naive_local());
        }
        self.update_time = Set(Local::now().naive_local());
        Ok(self)
    }
}
