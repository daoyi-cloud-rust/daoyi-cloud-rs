//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use crate::vo::{serialize_datetime, serialize_opt_datetime};
use daoyi_cloud_common::enums::common_status_enum::CommonStatusEnum;
use daoyi_cloud_common::enums::serialize_enum;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "system_users")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub username: String,
    #[serde(skip_serializing)]
    pub password: String,
    pub nickname: String,
    pub remark: Option<String>,
    pub dept_id: Option<i64>,
    pub post_ids: Option<String>,
    pub email: Option<String>,
    pub mobile: Option<String>,
    pub sex: Option<i8>,
    pub avatar: Option<String>,
    #[serde(serialize_with = "serialize_enum")]
    pub status: CommonStatusEnum,
    #[serde(skip_serializing)]
    pub login_ip: Option<String>,
    #[serde(
        serialize_with = "serialize_opt_datetime",
        skip_serializing_if = "Option::is_none"
    )]
    pub login_date: Option<DateTime>,
    #[serde(skip_serializing)]
    pub creator: Option<String>,
    #[serde(serialize_with = "serialize_datetime")]
    pub create_time: DateTime,
    #[serde(skip_serializing)]
    pub updater: Option<String>,
    #[serde(serialize_with = "serialize_datetime")]
    pub update_time: DateTime,
    #[serde(skip_serializing)]
    pub deleted: bool,
    #[serde(skip_serializing)]
    pub tenant_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

impl ActiveModelBehavior for ActiveModel {}
