//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.12

use sea_orm::Set;
use sea_orm::entity::prelude::*;
use sea_orm::prelude::async_trait::async_trait;
use sea_orm::sqlx::types::chrono::Local;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "system_oauth2_access_token")]
#[serde(rename_all = "camelCase")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub user_id: i64,
    pub user_type: i8,
    pub user_info: String,
    pub access_token: String,
    pub refresh_token: String,
    pub client_id: String,
    pub scopes: Option<String>,
    pub expires_time: DateTime,
    pub terminal_id: Option<String>,
    pub creator: Option<String>,
    pub create_time: DateTime,
    pub updater: Option<String>,
    pub update_time: DateTime,
    pub deleted: bool,
    pub tenant_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(mut self, _db: &C, insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        if insert {
            self.create_time = Set(Local::now().naive_local());
        }
        self.update_time = Set(Local::now().naive_local());
        Ok(self)
    }
}
