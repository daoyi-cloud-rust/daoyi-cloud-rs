//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.11

use derive_more::From;
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize, From)]
#[sea_orm(table_name = "system_users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub username: String,
    pub password: String,
    pub nickname: String,
    pub remark: Option<String>,
    pub dept_id: Option<i64>,
    pub post_ids: Option<String>,
    pub email: Option<String>,
    pub mobile: Option<String>,
    pub sex: Option<i8>,
    pub avatar: Option<String>,
    #[sea_orm(default_value = 0)]
    pub status: i8,
    pub login_ip: Option<String>,
    pub login_date: Option<DateTime>,
    pub creator: Option<String>,
    #[sea_orm(default_expr = "Expr::current_timestamp()")]
    pub create_time: DateTime,
    pub updater: Option<String>,
    #[sea_orm(on_update = "Expr::current_timestamp()")]
    pub update_time: DateTime,
    #[sea_orm(default_value = false)]
    pub deleted: bool,
    #[sea_orm(default_value = 0)]
    pub tenant_id: i64,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {}

#[async_trait::async_trait]
impl ActiveModelBehavior for ActiveModel {
    async fn before_save<C>(self, _db: &C, _insert: bool) -> Result<Self, DbErr>
    where
        C: ConnectionTrait,
    {
        Ok(self)
    }
}
